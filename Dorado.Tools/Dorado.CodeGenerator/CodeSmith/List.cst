<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL"  Description="Generates a DMMIS EntityClass."  %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="The table to use for this sample." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="mscorlib" %>
<%@ Import Namespace="System.Collections.Generic" %>
@*----------------------------------------
-- Create By Len.zhang
-- Template:       List.cst
-- Description: 
-- Date Generated: <%=GetDateTime()%>
----------------------------------------*@
@{
    ViewBag.Title ="<%=GetTableDescription()%>管理";
}
@section Style{}
@section HeadScript{
    <script type="text/javascript" src="/ui/section.js"></script>
}
   <div class="container">
<div class="mdiv" id="main" control="main" select="mvc.<%=GetClassName(SourceTable.Name).ToLower()%>.<%=GetShortName(SourceTable.Name).ToLower()%>">
    <div class="breadcrumb" id="sear" search="common">
     <% for (int i=0;i<GetSearchColumns().Count; i++) {%>
    <%=GetColumnDescription(GetSearchColumns()[i]) %>：
    <%switch(GetSearchColumns()[i].NativeType) {%>
    <%case "nvarchar": %>
     <%case "varchar": %>
    <input type="text" id="key<%=i%>" name="key<%=i%>" placeholder=" <%=GetColumnDescription(GetSearchColumns()[i]) %>" class="input-normal">
    <%break; %>
    <%case "bit": %>
   <select id="kind<%=i%>" name="kind<%=i%>" class="input-normal" >
     <option value="-1"><%=GetColumnDescription(GetSearchColumns()[i]) %></option>
     <option value="1">是</option>
     <option value="0">否</option>
    </select>
    <%break; %>
    <%case "tinyint": %>
        @Html.DictDropDownList("kind<%=i%>", "<%=SourceTable.Name.ToLower()%>_<%=GetSearchColumns()[i].Name.ToLower()%>")
    <%break; %>
    <% }%> <% }%>
        <a act="search" id="search" href="#" class="button button-small"><i class="icon-search"></i> 搜索</a> <a act="reset" id="reset" href="#" class="button button-small">清空</a></div>
    <table id="mlist" name="mlist" list="auto" loading="true" class="table table-striped table-condensed">
        <thead>
            <tr>
                <th colspan="<%=SourceTable.Columns.Count+2%>">
                    <ul class="toolbar">
                    <%if(!SourceTable.Description.Contains("view")) {%>
                       <li><a href="#" title="新增<%=GetTableDescription()%>" data-href="/<%=GetClassName(SourceTable.Name).ToLower()%>/<%=GetShortName(SourceTable.Name).ToLower()%>add" data-id="<%=SourceTable.Name.ToLower()%>add" class="button button-small page-action">
                            新增</a></li>
                        <li><a id="edit" act="keylist" href="#" class="button button-small">
                            编辑</a></li>
                            <%} %>
                       <li><a id="view" act="keylist" href="#" class="button button-small">
                            查看</a></li>
                            <%if(!SourceTable.Description.Contains("delete")) {%>
                       <li><a id="del" act="keylist" cmd="mvc.<%=GetClassName(SourceTable.Name).ToLower()%>.<%=GetShortName(SourceTable.Name).ToLower()%>delete" href="#" class="button button-small">
                            删除</a></li>
                            <%} %>
                    </ul>
                </th>
            </tr>
            <tr>
                <td class="span1">
                    <input id="key_select" type="checkbox" onclick="F.selectAll('mlist',this)" name="key_select" />
                </td>
                <% foreach (ColumnSchema column in GetListColumns()) { %>
                <%if(!column.IsPrimaryKeyMember&&column.Name.ToLower()!="autoid"&&column.Name.ToLower()!="isdeleted") {%>
                <td>
                    <%=GetColumnDescription(column)%>
                </td>
                <% }}%>
                <td class="span6">
                    操作
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input id="key" type="checkbox" name="id">
                </td>
                 <% foreach (ColumnSchema column in GetListColumns()) { %>
                 <%if(!column.IsPrimaryKeyMember&&column.Name.ToLower()!="autoid"&&column.Name.ToLower()!="isdeleted") {%>
                <td name="<%=column.Name.ToLower()%>"<%=SetInBox(column)%>>
                </td>
                <% }}%>
                <td id="operation">
                 <%if(!SourceTable.Description.Contains("view")) {%>
                 <a id="edit1" act="key" href="#">[编辑]</a>
                 <%} %>
                 <%if(!SourceTable.Description.Contains("delete")) {%>
                 <a id="del1" act="key" cmd="mvc.<%=GetClassName(SourceTable.Name).ToLower()%>.<%=GetShortName(SourceTable.Name).ToLower()%>delete" href="">[删除]</a>
                <%} %>
                </td>
            </tr>
        </tbody>
        <tbody name="empty">
            <tr>
                <td colspan="<%=SourceTable.Columns.Count+2%>" id="empty" style="text-align: center; padding: 20px">
                    没有找到相关记录
                </td>
            </tr>
        </tbody>
    </table>
    <div>
        <ul class="toolbar pull-left">
         <%if(!SourceTable.Description.Contains("view")) {%>
           <li><a href="#" title="新增<%=GetTableDescription()%>" data-href="/<%=GetClassName(SourceTable.Name).ToLower()%>/<%=GetShortName(SourceTable.Name).ToLower()%>add" data-id="<%=SourceTable.Name.ToLower()%>add" class="button button-small page-action">
                            新增</a></li>
              <li><a id="edit" act="keylist" href="#" class="button button-small">
                            编辑</a></li>
                            <%} %>
                            <li><a id="view" act="keylist" href="#" class="button button-small">
                            查看</a></li>
                            <%if(!SourceTable.Description.Contains("delete")) {%>
                        <li><a id="del" act="keylist" cmd="mvc.<%=GetClassName(SourceTable.Name).ToLower()%>.<%=GetShortName(SourceTable.Name).ToLower()%>delete" href="#" class="button button-small">
                            删除</a></li>
                            <%} %>
        </ul>
        <ul group="page" class="pagination pull-right" id="pagenav">
            <li class="disabled">
                <script type="text/javascript">                    drawPage();</script>
            </li>
        </ul>
        <ul id="pageturn" group="pageturn" free="true" scale="6" class="pagination pull-right">
        </ul>
    </div>
</div>
</div>
@section FootScript
{
    <script type="text/javascript">
    
    <% foreach (ColumnSchema column in SourceTable.Columns) { %>
    <%if(column.Name.ToLower()=="isdeleted") continue; %>
    <%switch (column.NativeType){%>
     <%case "bit": %>
       //Bool<%=column.Name %>类型转换
       function set<%=column.Name%>(v) {
            this.innerHTML = v=="1"?"是":"否";
        }
        <%break; %>
        <%case "tinyint": %>
       //字典<%=column.Name %>类型转换
       function set<%=column.Name%>(v) {
            this.innerHTML = Shared.getDictName(Dict.<%=SourceTable.Name.ToLower()%>_<%=column.Name.ToLower()%>,v);
        }
        <%break; %>
       <% }%>
       <%if(column.Description.Contains("viewentry")) {%>
        function setViewEntry(v) {
            var id = F.top(this).getElementsByTagName("INPUT")[0].value;
             this.innerHTML = '<a href="#" title="查看<%=GetTableDescription()%>" data-href="/<%=GetClassName(SourceTable.Name).ToLower()%>/<%=GetShortName(SourceTable.Name).ToLower()%>view?id='+id+'" data-id="<%=SourceTable.Name.ToLower()%>view?id='+id+'" class="page-action">'+v+'</a>';
        }
       <%} %>
    <% }%>
            
        function Act_Before(o, c, p) {
            switch (o.id) {
            case "view":
            if (p == "") {
                        Alert("请选择要操作的数据");
                        return false;
                    }
                     var arr = p.split(",");
                    for (var i = 0; i < arr.length; i++) {
                        openTab("<%=SourceTable.Name.ToLower()%>view"+arr[i],"/<%=GetClassName(SourceTable.Name).ToLower()%>/<%=GetShortName(SourceTable.Name).ToLower()%>view?id="+arr[i],"查看<%=GetTableDescription()%>");
                    }
           return false;
           <%if(!SourceTable.Description.Contains("view")) {%>
                case "edit1":
            case "edit":
            if (p == "") {
                        Alert("请选择要操作的数据");
                        return false;
                    }
                     var arr = p.split(",");
                    for (var i = 0; i < arr.length; i++) {
                        openTab("<%=SourceTable.Name.ToLower()%>edit"+arr[i],"/<%=GetClassName(SourceTable.Name).ToLower()%>/<%=GetShortName(SourceTable.Name).ToLower()%>edit?id="+arr[i],"编辑<%=GetTableDescription()%>");
                    }
           return false;
           <%} %>
           <%if(!SourceTable.Description.Contains("delete")) {%>
                case "del1":
                    case "del":
                    if (p == "") {
                        Alert("请选择要操作的数据");
                        return false;
                    }
                    return (confirm("确定要删除吗?该操作不可恢复"));
                    <%} %>
            }
            return true;
        }

        function Act_After(o, c, p) {
            var main = Control.main;
            switch (o.id) {
            <%if(!SourceTable.Description.Contains("delete")) {%>
                case "del1":
                case "del":
                    if (p.success) {
                        rePage();
                        main.fresh();
                    }
                    break;
                    <%} %>
                    default:
                    break;
            }
        }
         $(document).ready(function () {
            F.init("main");
        });
    </script>
}


<script runat="template">
private bool IsHasLocationColumn(){
foreach(ColumnSchema column in SourceTable.Columns)
{
    if(column.Description.Contains("location"))
      {
          return true;
      }
}
return false;
}
            private List<ColumnSchema> GetListColumns(){

List<ColumnSchema> groupTables=new List<ColumnSchema>();

foreach(ColumnSchema column in SourceTable.Columns)
{
    if(!column.Description.Contains("listnoshow"))
      {
          groupTables.Add(column);
      }
}
return groupTables;
}
            
private List<ColumnSchema> GetSearchColumns(){

List<ColumnSchema> groupTables=new List<ColumnSchema>();

foreach(ColumnSchema column in SourceTable.Columns)
{
    if(column.Description.Contains("search"))
      {
          groupTables.Add(column);
      }
}
return groupTables;
}
public string GetColumnSize(ColumnSchema column){
	if(column.NativeType=="varchar" || column.NativeType=="nvarchar"){
		return string.Format("	({0})",column.Size);
	}else{
		return "";
	}
}
public string GetDateTime(){
	return DateTime.Now.ToString("yyyy-MM-dd HH:mm");
	}
public string GetPrimarykeyColumnName(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   return column.Name.ToString();
  }
 }
 return "";

}
public string GetPrimarykeyColumnDataType(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   return GetColumnDataType(column);
  }
 }
 return "";
}
public string SetInBox(ColumnSchema column){
switch (column.NativeType)
 {
     case "bit" : return " inbox=\"set"+column.Name+"\"";
	case "tinyint" : return " inbox=\"set"+column.Name+"\"";
 }
 if(column.Description.Contains("viewentry"))
     return " inbox=\"setViewEntry\"";
 return ""; 
}
public string GetPrimarykeyColumnValueType(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   	return column.NativeType;
  }
 }
 return "object";
}

public string GetUpdateSql(SchemaExplorer.TableSchema SourceTable)
{
 string sql = "update "+ SourceTable.Name.ToString() +" set";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql +=  " "+column.Name+"="+"@"+column.Name+",";
 }
 return sql.Substring(0,sql.Length-1);
 
}

public string GetInserSql(SchemaExplorer.TableSchema SourceTable)
{
 string sql = "insert into "+SourceTable.Name.ToString()+" ( ";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql +=  column.Name + ",";
 }
 sql = sql.Substring(0,sql.Length-1);
 sql += " ) values (";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql += "@"+column.Name + ",";
 }
 sql = sql.Substring(0,sql.Length-1);
 sql += " )";
 return sql;
}


public string GetColumnDataType(ColumnSchema column)
{
 switch (column.NativeType)
 {
  case "int" : return "DbType.Int32";
  case "char": return "DbType.Char";
  case "money": return "DbType.Money";
  case "datetime": return "DbType.DateTime";
  case "nvarchar" : return "DbType.NVarChar,"+column.Size.ToString();
  case "bigint" : return "DbType.Int64";
  case "float" : return "DbType.Float";
  default: return column.NativeType.ToString();
 }
 
 return ""; 
}
public string GetColumnDescription(ColumnSchema column)
{
string des=column.Description;
    int index=des.IndexOf("||");
    if(index>-1)
    return des.Substring(0,index);
    else
 return des;
}
public string GetTableDescription()
{
string des=SourceTable.Description;
    int index=des.IndexOf("||");
    if(index>-1)
    return des.Substring(0,index);
    else
 return des;
}
public string GetColumnValueType(ColumnSchema column)
{
 switch (column.NativeType)
 {
  case "int" : return "int";
  case "char": return "char";
         case "nchar" : return "string";
  case "money": return "decimal";
  case "datetime": return "DateTime";
  case "nvarchar" : return "string";
  case "varchar" : return "string";
  case "bigint" : return "long";
  case "float" : return "float";
	case "bit" : return "bool";
	case "smallint" : return "short";
	case "tinyint" : return "byte";
	case "ntext" : return "string";
	
  default: return "object";
 }
 
 return ""; 
}
private string GetShortName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(index+1);
}
return tableName;
}
private string GetClassName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(0,index);
}
return "Main";
}
</script>