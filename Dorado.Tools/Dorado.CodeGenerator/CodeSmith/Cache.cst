<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL"  Description="Generates a DMMIS EntityClass."  %>
<%@ Property Name="SourceTables" Type="System.Collections.Generic.List<SchemaExplorer.TableSchema>" Category="Context" Description="The tables to use for this sample." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Property Name="NamePlaceName" Type="System.String" Description="This will show up at the bottom of the property grid when the property is selected." %>
<%@ Property Name="BSName" Type="System.String" Description="This will show up at the bottom of the property grid when the property is selected." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="mscorlib" %>
<%@ Import Namespace="System.Collections.Generic" %>
/*----------------------------------------
-- Create By CodeSmith 7.0
-- Template:       Controller.cst
-- Description: 
-- Date Generated: <%=GetDateTime()%>
----------------------------------------*/
using Dorado.Core;
using Dorado.Core.Data;
using Dorado.Core.Logger;
using System;

namespace <%=NamePlaceName%>.Services.Cache
{
    public partial class <%=BSName%>CacheProvider : BaseProvider
    {
        private static readonly string Cache_Prefix = "cache:<%=BSName.ToLower()%>";
        private static readonly string Trigger_Clear = "trigger:<%=BSName.ToLower()%>:clear";
        
    <% foreach (SchemaExplorer.TableSchema SourceTable in SourceTables) { %>
    
      /// <summary>
        /// 获取<%=GetTableDescription(SourceTable)%>缓存基础信息
        /// </summary>
        /// <param name="uticket"></param>
        /// <returns></returns>
        public DataArray Get<%=GetShortName(SourceTable.Name) %>BaseInfo(long id)
        {
            DataArray result = new DataArray();
            try
            {
                result = CacheManager.Get(string.Format("{0}:<%=GetShortName(SourceTable.Name).ToLower() %>:base:{1}", Cache_Prefix, id),
                   ctx =>
                   {
                       ctx.Monitor(Clock.When(TimeSpan.FromSeconds(60 * 5)));
                       ctx.Monitor(Signals.When(Trigger_Clear));
                       using (Conn conn = GetConn())
                       {
                           DataArray data = conn.Select("select <%=GetBaseColumn(SourceTable) %> from [<%=SourceTable.Name %>](nolock) where [id]={0}", id);
                           if (data.IsEmpty)
                               throw new CoreException("数据不存在");

                           return data;
                       }
                   });

                return result;
            }
            catch (Exception ex)
            {
                LoggerWrapper.Logger.Error("从缓存中获取<%=GetTableDescription(SourceTable)%>基础信息错误，id="+id, ex);
            }
            return result;
        }
        
        /// <summary>
        /// 获取<%=GetTableDescription(SourceTable)%>缓存信息
        /// </summary>
        /// <param name="uticket"></param>
        /// <returns></returns>
        public DataArray Get<%=GetShortName(SourceTable.Name) %>Info(long id)
        {
            DataArray result = new DataArray();
            try
            {
                result = CacheManager.Get(string.Format("{0}:<%=GetShortName(SourceTable.Name).ToLower() %>:{1}", Cache_Prefix, id),
                   ctx =>
                   {
                       ctx.Monitor(Clock.When(TimeSpan.FromSeconds(60 * 5)));
                       ctx.Monitor(Signals.When(Trigger_Clear));
                       using (Conn conn = GetConn())
                       {
                           DataArray data = conn.Select("select * from [<%=SourceTable.Name %>](nolock) where [id]={0}", id);
                           if (data.IsEmpty)
                               throw new CoreException("数据不存在");

                           return data;
                       }
                   });

                return result;
            }
            catch (Exception ex)
            {
                  LoggerWrapper.Logger.Error("从缓存中获取<%=GetTableDescription(SourceTable)%>信息错误，id="+id, ex);
            }
            return result;
        }
       
       <% }%> 
       
       
        public override void Clear() {
            Signals.Trigger(Trigger_Clear);
        }
    }
}

<script runat="template">

         private string GetBaseColumn(SchemaExplorer.TableSchema SourceTable){
             
             string columns = "";
            Dictionary<string, int> d = new Dictionary<string, int>();
            d.Add("autoid",1);
            d.Add("createuserid",1);
            d.Add("createtime",1);
            d.Add("edituserid",1);
            d.Add("edittime",1);
            d.Add("description",1);

foreach(ColumnSchema column in SourceTable.Columns)
{

    if(!d.ContainsKey(column.Name.ToLower()))
      {
        columns += SourceTable.Name+".["+column.Name + "],";
      }
}
columns = columns.Substring(0,columns.Length-1);
return columns;
}
         
     private List<ColumnSchema> GetListColumns(SchemaExplorer.TableSchema SourceTable){

List<ColumnSchema> groupTables=new List<ColumnSchema>();

foreach(ColumnSchema column in SourceTable.Columns)
{
    if(!column.Description.Contains("listnoshow"))
      {
          groupTables.Add(column);
      }
}
return groupTables;
}
     
private List<ColumnSchema> GetSearchColumns(SchemaExplorer.TableSchema SourceTable){

List<ColumnSchema> groupTables=new List<ColumnSchema>();

foreach(ColumnSchema column in SourceTable.Columns)
{
    if(column.Description.Contains("search"))
      {
          groupTables.Add(column);
      }
}
return groupTables;
}
public string GetColumnSize(ColumnSchema column){
	if(column.NativeType=="varchar" || column.NativeType=="nvarchar"){
		return string.Format("	({0})",column.Size);
	}else{
		return "";
	}
}
public string GetDateTime(){
	return DateTime.Now.ToString("yyyy-MM-dd HH:mm");
	}
public string GetPrimarykeyColumnName(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   return column.Name.ToString();
  }
 }
 return "";

}
public string GetPrimarykeyColumnDataType(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   return GetColumnDataType(column);
  }
 }
 return "";
}

public string GetPrimarykeyColumnValueType(SchemaExplorer.TableSchema SourceTable)
{
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  if(column.IsPrimaryKeyMember)
  {
   	return column.NativeType;
  }
 }
 return "object";
}
public string GetColumnDescription(ColumnSchema column)
{
string des=column.Description;
    int index=des.IndexOf("||");
    if(index>-1)
    return des.Substring(0,index);
    else
 return des;
}
public string GetTableDescription(SchemaExplorer.TableSchema SourceTable)
{
string des=SourceTable.Description;
    int index=des.IndexOf("||");
    if(index>-1)
    return des.Substring(0,index);
    else
 return des;
}
public string GetUpdateSql(SchemaExplorer.TableSchema SourceTable)
{
 string sql = "update "+ SourceTable.Name.ToString() +" set";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql +=  " "+column.Name+"="+"@"+column.Name+",";
 }
 return sql.Substring(0,sql.Length-1);
 
}

public string GetInserSql(SchemaExplorer.TableSchema SourceTable)
{
 string sql = "insert into "+SourceTable.Name.ToString()+" ( ";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql +=  column.Name + ",";
 }
 sql = sql.Substring(0,sql.Length-1);
 sql += " ) values (";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  sql += "@"+column.Name + ",";
 }
 sql = sql.Substring(0,sql.Length-1);
 sql += " )";
 return sql;
}
public string GetEditColumn(SchemaExplorer.TableSchema SourceTable)
{
 string columns = "";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
     if(!column.Description.Contains("逻辑"))
  columns += SourceTable.Name+".["+column.Name + "],";
 }
 columns = columns.Substring(0,columns.Length-1);
 
 return columns;
}
public string GetAllColumn(SchemaExplorer.TableSchema SourceTable)
{
 string columns = "";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
  columns += SourceTable.Name+".["+column.Name + "],";
 }
 columns = columns.Substring(0,columns.Length-1);
 
 return columns;
}
public string GetListColumn(SchemaExplorer.TableSchema SourceTable)
{
 string columns = "";
 foreach(ColumnSchema column in SourceTable.Columns)
 {
      if(!column.Description.Contains("listnoshow"))
  columns += SourceTable.Name+".["+column.Name + "],";
 }
 columns = columns.Substring(0,columns.Length-1);
 
 return columns;
}
public string GetColumnDataType(ColumnSchema column)
{
 switch (column.NativeType)
 {
  case "int" : return "DbType.Int32";
  case "char": return "DbType.Char";
  case "money": return "DbType.Money";
  case "datetime": return "DbType.DateTime";
  case "nvarchar" : return "DbType.NVarChar,"+column.Size.ToString();
  case "bigint" : return "DbType.Int64";
  case "float" : return "DbType.Float";
  default: return column.NativeType.ToString();
 }
 
 return ""; 
}
public string GetColumnValueType(ColumnSchema column)
{
 switch (column.NativeType)
 {
  case "int" : return "int";
  case "char": return "char";
         case "nchar" : return "string";
  case "money": return "decimal";
  case "datetime": return "DateTime";
  case "nvarchar" : return "string";
  case "varchar" : return "string";
  case "bigint" : return "long";
  case "float" : return "float";
	case "bit" : return "bool";
	case "smallint" : return "short";
	case "tinyint" : return "byte";
	case "ntext" : return "string";
	
  default: return "object";
 }
 
 return ""; 
}
private string GetShortName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(index+1);
}
return tableName;
}
private string GetClassName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(0,index);
}
return "Main";
}
</script>